import streamlit as st
import fitz  # PyMuPDF
from groq import Groq
import os
import requests
from geopy.geocoders import Nominatim
import folium
from streamlit_folium import folium_static

# Caminho din√¢mico da logo
CURRENT_DIR = os.path.dirname(os.path.abspath(__file__))
LOGO_PATH = os.path.join(CURRENT_DIR, "logo.png")

# Configurar chave da Groq
GROQ_API_KEY = "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"
client = Groq(api_key=GROQ_API_KEY)

# Gloss√°rio m√©dico
GLOSSARIO = {
    "hipertens√£o": "Press√£o arterial elevada, geralmente acima de 140/90 mmHg.",
    "diabetes": "Doen√ßa metab√≥lica caracterizada por altos n√≠veis de glicose no sangue.",
    "ECG": "Eletrocardiograma - exame que registra a atividade el√©trica do cora√ß√£o.",
    "hemoglobina": "Prote√≠na nas c√©lulas vermelhas do sangue que transporta oxig√™nio.",
    "leuc√≥citos": "C√©lulas brancas do sangue, parte do sistema imunol√≥gico.",
    "plaquetas": "Fragmentos celulares que ajudam na coagula√ß√£o do sangue.",
    "PCR": "Prote√≠na C-Reativa - marcador de inflama√ß√£o no organismo.",
    "TSH": "Horm√¥nio estimulante da tireoide - regula a fun√ß√£o tireoidiana.",
    "AST/ALT": "Enzimas hep√°ticas - n√≠veis elevados podem indicar dano ao f√≠gado.",
    "creatinina": "Subst√¢ncia no sangue que ajuda a avaliar a fun√ß√£o renal.",
    "satura√ß√£o O2": "Porcentagem de hemoglobina carregando oxig√™nio no sangue.",
    "PA": "Press√£o arterial - medida da for√ßa do sangue contra as paredes das art√©rias.",
    "FR": "Frequ√™ncia respirat√≥ria - n√∫mero de respira√ß√µes por minuto.",
    "FC": "Frequ√™ncia card√≠aca - n√∫mero de batimentos card√≠acos por minuto.",
    "TGO/TGP": "Antigos nomes para AST e ALT, respectivamente.",
    "INR": "Raz√£o Normalizada Internacional - mede o tempo de coagula√ß√£o do sangue.",
    "SpO2": "Satura√ß√£o perif√©rica de oxig√™nio - medida por ox√≠metro de pulso.",
    "Rx": "Raio-X - exame de imagem que usa radia√ß√£o para visualizar estruturas internas.",
    "TC": "Tomografia computadorizada - exame de imagem mais detalhado que raio-X.",
    "RM": "Resson√¢ncia magn√©tica - exame de imagem que usa campos magn√©ticos."
}

# N√∫meros de emerg√™ncia por pa√≠s
EMERGENCY_NUMBERS = {
    "Brasil": {"SAMU": "192", "Bombeiros": "193", "Pol√≠cia": "190"},
    "Portugal": {"Emerg√™ncia": "112"},
    "EUA": {"Emerg√™ncia": "911"},
    "Espanha": {"Emerg√™ncia": "112"},
    "Reino Unido": {"Emerg√™ncia": "999"},
    "Alemanha": {"Emerg√™ncia": "112"},
    "Fran√ßa": {"Emerg√™ncia": "112"},
    "It√°lia": {"Emerg√™ncia": "112"},
    "Outro": {"Consulte": "o servi√ßo de emerg√™ncia local"}
}

# Fun√ß√£o para extrair texto de PDFs
def extract_text_from_pdfs(uploaded_pdfs):
    text = ""
    for pdf in uploaded_pdfs:
        try:
            with fitz.open(stream=pdf.read(), filetype="pdf") as doc:
                for page in doc:
                    text += page.get_text("text")
            st.success(f"‚úÖ PDF '{pdf.name}' processado com sucesso!")
        except Exception as e:
            st.error(f"‚ùå Erro ao ler o PDF '{pdf.name}': {e}")
    return text

# Fun√ß√£o para determinar a cor da triagem
def determinar_triagem(resposta):
    termos_vermelho = ["emerg√™ncia", "urgente", "imediatamente", "grave", "risco de vida", 
                      "SAMU", "192", "911", "112", "pronto-socorro", "dor no peito", 
                      "dificuldade respirat√≥ria", "sangramento intenso", "perda de consci√™ncia",
                      "AVC", "acidente vascular cerebral", "infarto", "convuls√£o"]
    
    termos_amarelo = ["avaliar", "recomendo consulta", "m√©dico", "exames", "investigar",
                     "poss√≠vel", "suspeita", "recomend√°vel", "urg√™ncia relativa", "monitorar"]
    
    if any(termo.lower() in resposta.lower() for termo in termos_vermelho):
        return "vermelho"
    elif any(termo.lower() in resposta.lower() for termo in termos_amarelo):
        return "amarelo"
    else:
        return "verde"

# Fun√ß√£o para mostrar n√∫meros de emerg√™ncia
def mostrar_numeros_emergencia():
    st.sidebar.markdown("### üìû N√∫meros de Emerg√™ncia")
    pais_selecionado = st.sidebar.selectbox("Selecione seu pa√≠s:", list(EMERGENCY_NUMBERS.keys()))
    
    for servico, numero in EMERGENCY_NUMBERS[pais_selecionado].items():
        st.sidebar.markdown(f"**{servico}:** `{numero}`")

# Fun√ß√£o para criar mapa de hospitais pr√≥ximos
def criar_mapa_hospitais(localizacao_usuario):
    try:
        geolocator = Nominatim(user_agent="diagnostic_ai")
        location = geolocator.geocode(localizacao_usuario)
        
        if location:
            mapa = folium.Map(location=[location.latitude, location.longitude], zoom_start=13)
            
            # Adicionar marcador do usu√°rio
            folium.Marker(
                [location.latitude, location.longitude],
                popup="Sua localiza√ß√£o",
                icon=folium.Icon(color="blue")
            ).add_to(mapa)
            
            # Buscar hospitais pr√≥ximos (usando Nominatim - para produ√ß√£o, considere API especializada)
            hospitais = geolocator.geocode("hospital", exactly_one=False, limit=5, 
                                          viewbox=[[location.latitude-0.1, location.longitude-0.1], 
                                                  [location.latitude+0.1, location.longitude+0.1]])
            
            if hospitais:
                for hospital in hospitais:
                    folium.Marker(
                        [hospital.latitude, hospital.longitude],
                        popup=hospital.address,
                        icon=folium.Icon(color="red", icon="plus-sign")
                    ).add_to(mapa)
            
            return mapa
        else:
            st.warning("N√£o foi poss√≠vel determinar sua localiza√ß√£o. Verifique o endere√ßo.")
            return None
    except Exception as e:
        st.error(f"Erro ao criar mapa: {e}")
        return None

# Fun√ß√£o para adicionar tooltips com gloss√°rio
def adicionar_glossario(texto):
    for termo, definicao in GLOSSARIO.items():
        if termo.lower() in texto.lower():
            texto = texto.replace(termo, f'<span title="{definicao}">{termo}</span>')
    return texto

# Fun√ß√£o para interagir com a IA da Groq para diagn√≥sticos
def diagnosticar_com_groq(pergunta, contexto=None):
    messages = [
        {
            "role": "system", 
            "content": """Voc√™ √© uma intelig√™ncia artificial m√©dica especializada em an√°lise preliminar de condi√ß√µes de sa√∫de. 
            Suas responsabilidades incluem:
            
            1. Analisar sintomas descritos pelo usu√°rio com precis√£o e cuidado
            2. Interpretar relat√≥rios cl√≠nicos e resultados de exames quando fornecidos
            3. Oferecer informa√ß√µes m√©dicas baseadas em evid√™ncias cient√≠ficas
            4. Sugerir poss√≠veis condi√ß√µes relacionadas (como diagn√≥stico diferencial)
            5. Recomendar quando procurar atendimento m√©dico
            6. Fornecer contatos de emerg√™ncia quando necess√°rio
            
            Restri√ß√µes obrigat√≥rias:
            - NUNCA afirme que seu diagn√≥stico √© definitivo
            - Em casos potencialmente graves (como dor no peito, dificuldade respirat√≥ria, sangramentos intensos):
              * Recomende busca imediata de atendimento m√©dico
              * Forne√ßa n√∫meros de telefone de emerg√™ncia locais
              * Descreva sinais de alarme para observar
            - Para quest√µes n√£o m√©dicas, responda apenas: "Desculpe, s√≥ posso ajudar com quest√µes m√©dicas"
            - Caso o arquivo n√£o tenha relac√£o com medicina, avise o usu√°rio e n√£o processe o arquivo
            - Em quest√µes m√©dicas, inclua a frase: "Este √© apenas um parecer preliminar - o diagn√≥stico definitivo requer avalia√ß√£o m√©dica profissional." como um paragrafo final
            - Mantenha tom profissional, emp√°tico e sem alarmismo desnecess√°rio"""
        },
    ]
    
    if contexto:
        messages.append({"role": "user", "content": f"Contexto dos exames:\n{contexto}\n\nPergunta: {pergunta}"})
    else:
        messages.append({"role": "user", "content": pergunta})
    
    response = client.chat.completions.create(
        model="llama3-70b-8192",
        messages=messages
    )
    return response.choices[0].message.content

# Interface do Streamlit
def main():
    # Configura√ß√£o da p√°gina com √≠cone personalizado
    st.set_page_config(
        page_title="DiagnosticAI",
        page_icon="‚öïÔ∏è",
        layout="centered"
    )
    
    # Imagem da logo (com largura responsiva)
    st.image(LOGO_PATH, use_column_width=True)

    st.markdown("""
    <style>
    .tooltip {
        position: relative;
        display: inline-block;
        border-bottom: 1px dotted black;
    }
    .tooltip .tooltiptext {
        visibility: hidden;
        width: 200px;
        background-color: #555;
        color: #fff;
        text-align: center;
        border-radius: 6px;
        padding: 5px;
        position: absolute;
        z-index: 1;
        bottom: 125%;
        left: 50%;
        margin-left: -100px;
        opacity: 0;
        transition: opacity 0.3s;
    }
    .tooltip:hover .tooltiptext {
        visibility: visible;
        opacity: 1;
    }
    </style>
    """, unsafe_allow_html=True)

    st.markdown("Fa√ßa perguntas m√©dicas para obter informa√ß√µes. Voc√™ pode carregar relat√≥rios m√©dicos ou exames em PDF para um diagn√≥stico mais preciso.")

    with st.sidebar:
        st.header("üìÑ Upload de Arquivos (Opcional)")
        uploaded_pdfs = st.file_uploader("Adicione seus PDFs cl√≠nicos", type="pdf", accept_multiple_files=True)
        
        mostrar_numeros_emergencia()
        
        st.header("üè• Localiza√ß√£o para Hospitais")
        localizacao_usuario = st.text_input("Digite seu endere√ßo ou cidade para encontrar hospitais pr√≥ximos:")
        if localizacao_usuario:
            mapa = criar_mapa_hospitais(localizacao_usuario)
            if mapa:
                folium_static(mapa)

    if uploaded_pdfs:
        texto_extraido = extract_text_from_pdfs(uploaded_pdfs)
        st.session_state["texto_clinico"] = texto_extraido

    pergunta_usuario = st.text_input("ü©∫ Qual √© a sua d√∫vida m√©dica?")

    if pergunta_usuario:
        contexto = st.session_state.get("texto_clinico", None)
        resposta = diagnosticar_com_groq(pergunta_usuario, contexto)
        
        # Determinar n√≠vel de urg√™ncia
        nivel_triagem = determinar_triagem(resposta)
        
        # Mostrar resposta com formata√ß√£o de cores
        st.markdown("### ÔøΩ Triagem de Urg√™ncia")
        if nivel_triagem == "vermelho":
            st.error("üî¥ N√≠vel VERMELHO - Procure atendimento m√©dico IMEDIATAMENTE!")
        elif nivel_triagem == "amarelo":
            st.warning("üü° N√≠vel AMARELO - Recomendada avalia√ß√£o m√©dica em breve")
        else:
            st.success("üü¢ N√≠vel VERDE - Sem urg√™ncia aparente")
        
        st.markdown("### ÔøΩ Resposta da IA:")
        
        # Adicionar tooltips do gloss√°rio
        resposta_com_glossario = adicionar_glossario(resposta)
        st.markdown(resposta_com_glossario, unsafe_allow_html=True)
        
        # Mostrar mapa novamente se for caso de emerg√™ncia
        if nivel_triagem in ["vermelho", "amarelo"]:
            st.markdown("### üè• Hospitais Pr√≥ximos")
            if 'localizacao_usuario' in locals() and localizacao_usuario:
                mapa = criar_mapa_hospitais(localizacao_usuario)
                if mapa:
                    folium_static(mapa)
            else:
                st.warning("Digite sua localiza√ß√£o na barra lateral para visualizar hospitais pr√≥ximos.")

if __name__ == "__main__":
    main()