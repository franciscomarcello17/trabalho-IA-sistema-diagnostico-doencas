import streamlit as st
import fitz  # PyMuPDF
from groq import Groq
import os

# Caminho din√¢mico da logo
CURRENT_DIR = os.path.dirname(os.path.abspath(__file__))
LOGO_PATH = os.path.join(CURRENT_DIR, "logo.png")

# Configurar chave da Groq
GROQ_API_KEY = "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"
client = Groq(api_key=GROQ_API_KEY)

# Fun√ß√£o para extrair texto de PDFs
def extract_text_from_pdfs(uploaded_pdfs):
    text = ""
    for pdf in uploaded_pdfs:
        try:
            with fitz.open(stream=pdf.read(), filetype="pdf") as doc:
                for page in doc:
                    text += page.get_text("text")
            st.success(f"‚úÖ PDF '{pdf.name}' processado com sucesso!")
        except Exception as e:
            st.error(f"‚ùå Erro ao ler o PDF '{pdf.name}': {e}")
    return text


# Fun√ß√£o para interagir com a IA da Groq para diagn√≥sticos
def diagnosticar_com_groq(pergunta, contexto=None):
    messages = [
        {
            "role": "system", 
            "content": """Voc√™ √© uma intelig√™ncia artificial m√©dica especializada em an√°lise preliminar de condi√ß√µes de sa√∫de. 
            Suas responsabilidades incluem:
            
            1. Analisar sintomas descritos pelo usu√°rio com precis√£o e cuidado
            2. Interpretar relat√≥rios cl√≠nicos e resultados de exames quando fornecidos
            3. Oferecer informa√ß√µes m√©dicas baseadas em evid√™ncias cient√≠ficas
            4. Sugerir poss√≠veis condi√ß√µes relacionadas (como diagn√≥stico diferencial)
            5. Recomendar quando procurar atendimento m√©dico
            6. Fornecer contatos de emerg√™ncia quando necess√°rio
            
            Restri√ß√µes obrigat√≥rias:
            - NUNCA afirme que seu diagn√≥stico √© definitivo
            - SEMPRE inclua a frase: "Este √© apenas um parecer preliminar - o diagn√≥stico definitivo requer avalia√ß√£o m√©dica presencial"
            - Em casos potencialmente graves (como dor no peito, dificuldade respirat√≥ria, sangramentos intensos):
              * Recomende busca imediata de atendimento m√©dico
              * Forne√ßa n√∫meros de telefone de emerg√™ncia locais
              * Descreva sinais de alarme para observar
            - Para quest√µes n√£o m√©dicas, responda apenas: "Desculpe, s√≥ posso ajudar com quest√µes m√©dicas"
            - Caso o arquivo n√£o tenha relac√£o com medicina, avise o usu√°rio e n√£o processe o arquivo
            - Mantenha tom profissional, emp√°tico e sem alarmismo desnecess√°rio"""
        },
    ]
    
    if contexto:
        messages.append({"role": "user", "content": f"Contexto dos exames:\n{contexto}\n\nPergunta: {pergunta}"})
    else:
        messages.append({"role": "user", "content": pergunta})
    
    response = client.chat.completions.create(
        model="llama-3.3-70b-versatile",
        messages=messages
    )
    return response.choices[0].message.content

# Interface do Streamlit
def main():
    # Configura√ß√£o da p√°gina com √≠cone personalizado
    st.set_page_config(
        page_title="DiagnosticAI",
        page_icon="‚öïÔ∏è",
        layout="centered"
    )
    
    # Imagem da logo (com largura responsiva)
    st.image(LOGO_PATH, use_container_width=True)

    st.markdown("Fa√ßa perguntas m√©dicas para obter informa√ß√µes. Voc√™ pode carregar relat√≥rios m√©dicos ou exames em PDF para um diagn√≥stico mais preciso.")

    with st.sidebar:
        st.header("üìÑ Upload de Arquivos (Opcional)")
        uploaded_pdfs = st.file_uploader("Adicione seus PDFs cl√≠nicos", type="pdf", accept_multiple_files=True)

    if uploaded_pdfs:
        texto_extraido = extract_text_from_pdfs(uploaded_pdfs)
        st.session_state["texto_clinico"] = texto_extraido
        st.success("‚úÖ Relat√≥rios cl√≠nicos processados com sucesso!")

    pergunta_usuario = st.text_input("ü©∫ Qual √© a sua d√∫vida m√©dica?")

    if pergunta_usuario:
        contexto = st.session_state.get("texto_clinico", None)
        resposta = diagnosticar_com_groq(pergunta_usuario, contexto)
        st.markdown("### üßæ Resposta da IA:")
        st.write(resposta)

if __name__ == "__main__":
    main()