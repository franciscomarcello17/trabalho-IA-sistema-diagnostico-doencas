import streamlit as st
import fitz  # PyMuPDF
from groq import Groq
import os

# Caminho din√¢mico da logo
CURRENT_DIR = os.path.dirname(os.path.abspath(__file__))
LOGO_PATH = os.path.join(CURRENT_DIR, "logo.png")

# Configurar chave da Groq
GROQ_API_KEY = "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"
client = Groq(api_key=GROQ_API_KEY)

# Dicion√°rio de pa√≠ses por idioma (para mapear automaticamente os n√∫meros de emerg√™ncia)
COUNTRIES_BY_LANGUAGE = {
    "Portugu√™s (Brasil)": "Brasil",
    "Portugu√™s (Portugal)": "Portugal",
    "English (United States)": "United States",
    "English (United Kingdom)": "United Kingdom",
    "Espa√±ol (Espa√±a)": "Espa√±a",
    "Fran√ßais (France)": "France",
    "Deutsch (Deutschland)": "Deutschland",
    "Italiano (Italia)": "Italia",
    "Êó•Êú¨Ë™û (Japan)": "Êó•Êú¨ (Japan)",
    "English (Australia)": "Australia",
    "English (Canada)": "Canada"
}

# N√∫meros de emerg√™ncia por pa√≠s (nomes originais nos idiomas locais)
EMERGENCY_NUMBERS = {
    "Brasil": {
        "SAMU": "192",
        "Bombeiros": "193", 
        "Pol√≠cia Militar": "190",
        "Disque Intoxica√ß√£o": "0800-722-6001",
        "CVV (Centro de Valoriza√ß√£o da Vida)": "188"
    },
    "Portugal": {
        "N√∫mero de Emerg√™ncia": "112",
        "Sa√∫de 24": "808 24 24 24",
        "Centro de Informa√ß√£o Antivenenos": "808 250 143"
    },
    "United States": {
        "Emergency": "911",
        "Poison Control": "1-800-222-1222",
        "Suicide & Crisis Lifeline": "988"
    },
    "United Kingdom": {
        "Emergency": "999",
        "NHS Non-emergency": "111",
        "National Poisons Information Service": "0344 892 0111"
    },
    "Espa√±a": {
        "Emergencias": "112",
        "Instituto Nacional de Toxicolog√≠a": "915 620 420"
    },
    "Deutschland": {
        "Notruf": "112",
        "Giftnotruf": "030-19240"
    },
    "France": {
        "Urgences": "112",
        "SAMU (Service d'Aide M√©dicale Urgente)": "15",
        "Centre Antipoison": "01 40 05 48 48"
    },
    "Italia": {
        "Emergenza": "112",
        "Emergenza Sanitaria": "118",
        "Centro Antiveleni": "06 4997 7700"
    },
    "Êó•Êú¨ (Japan)": {
        "ÊïëÊÄ• (Ky≈´ky≈´)": "119",
        "Ë≠¶ÂØü (Keisatsu)": "110"
    },
    "Australia": {
        "Emergency": "000",
        "Poisons Information": "13 11 26"
    },
    "Canada": {
        "Emergency": "911",
        "Poison Control": "1-800-268-9017"
    },
    "Other": {
        "Local emergency service": "Check local number",
        "International emergency": "112 (works in many countries)"
    }
}

# Textos da interface por idioma
INTERFACE_TEXTS = {
    "Portugu√™s (Brasil)": {
        "title": "DiagnosticAI",
        "header": "Fa√ßa perguntas m√©dicas para obter informa√ß√µes. Voc√™ pode carregar relat√≥rios m√©dicos ou exames em PDF para um diagn√≥stico mais preciso.",
        "upload_label": "Adicione seus PDFs cl√≠nicos",
        "emergency_title": "üìû N√∫meros de Emerg√™ncia",
        "select_country": "Selecione seu pa√≠s:",
        "question_placeholder": "ü©∫ Qual √© a sua d√∫vida m√©dica?",
        "response_title": "üí° Resposta da IA:",
        "sidebar_title": "üìÑ Upload de Arquivos (Opcional)",
        "pdf_success": "‚úÖ PDF '{}' processado com sucesso!",
        "pdf_error": "‚ùå Erro ao ler o PDF '{}': {}",
        "select_language": "üåê Idioma",
        "warning_title": "‚ö†Ô∏è Aviso Importante",
        "warning_message": "As informa√ß√µes fornecidas por esta IA s√£o preliminares e podem conter imprecis√µes. Sempre consulte um profissional de sa√∫de para diagn√≥stico e tratamento. Em emerg√™ncias, procure atendimento m√©dico imediatamente.",
        "references_title": "üìö Fontes e Refer√™ncias",
        "references_text": "As informa√ß√µes foram compiladas a partir de fontes m√©dicas confi√°veis, incluindo diretrizes cl√≠nicas atualizadas e literatura m√©dica reconhecida. Consulte sempre um profissional para orienta√ß√£o espec√≠fica."
    },
    # ... (os outros idiomas permanecem com a mesma estrutura, adicione as novas chaves para cada um)
    # Adicione as mesmas novas chaves para todos os outros idiomas
}

# Adicione as tradu√ß√µes para os novos textos em todos os idiomas
for lang in INTERFACE_TEXTS:
    if lang != "Portugu√™s (Brasil)":
        INTERFACE_TEXTS[lang].update({
            "warning_title": "‚ö†Ô∏è Important Warning",
            "warning_message": "The information provided by this AI is preliminary and may contain inaccuracies. Always consult a healthcare professional for diagnosis and treatment. In emergencies, seek immediate medical attention.",
            "references_title": "üìö Sources and References",
            "references_text": "Information was compiled from reliable medical sources, including updated clinical guidelines and recognized medical literature. Always consult a professional for specific guidance."
        })

# Fun√ß√£o para extrair texto de PDFs
def extract_text_from_pdfs(uploaded_pdfs, lang):
    text = ""
    for pdf in uploaded_pdfs:
        try:
            with fitz.open(stream=pdf.read(), filetype="pdf") as doc:
                for page in doc:
                    text += page.get_text("text")
            st.success(INTERFACE_TEXTS[lang]["pdf_success"].format(pdf.name))
        except Exception as e:
            st.error(INTERFACE_TEXTS[lang]["pdf_error"].format(pdf.name, str(e)))
    return text

# Fun√ß√£o para mostrar n√∫meros de emerg√™ncia
def mostrar_numeros_emergencia(lang):
    default_country = COUNTRIES_BY_LANGUAGE.get(lang, "Other")
    emergency_numbers = EMERGENCY_NUMBERS.get(default_country, EMERGENCY_NUMBERS["Other"])
    
    st.sidebar.markdown(f"### {INTERFACE_TEXTS[lang]['emergency_title']}")
    
    # Mostrar os n√∫meros de emerg√™ncia do pa√≠s padr√£o para o idioma selecionado
    for servico, numero in emergency_numbers.items():
        st.sidebar.markdown(f"**{servico}:** `{numero}`")

# Fun√ß√£o para interagir com a IA da Groq para diagn√≥sticos
def diagnosticar_com_groq(pergunta, contexto=None, lang="Portugu√™s (Brasil)"):
    system_prompt = {
        "Portugu√™s (Brasil)": """Voc√™ √© uma intelig√™ncia artificial m√©dica especializada em an√°lise preliminar de condi√ß√µes de sa√∫de.""",
        # ... (outros idiomas permanecem iguais)
    }.get(lang, """You are a medical AI specialized in preliminary analysis of health conditions.""")

    messages = [
        {
            "role": "system", 
            "content": system_prompt + """
            Suas responsabilidades incluem:
            
            1. Analisar sintomas descritos pelo usu√°rio com precis√£o e cuidado
            2. Interpretar relat√≥rios cl√≠nicos e resultados de exames quando fornecidos
            3. Oferecer informa√ß√µes m√©dicas baseadas em evid√™ncias cient√≠ficas
            4. Sugerir poss√≠veis condi√ß√µes relacionadas (como diagn√≥stico diferencial)
            5. Recomendar quando procurar atendimento m√©dico
            6. Fornecer contatos de emerg√™ncia quando necess√°rio
            7. Incluir ao final da resposta uma se√ß√£o com as principais fontes m√©dicas utilizadas
            
            Restri√ß√µes obrigat√≥rias:
            - NUNCA afirme que seu diagn√≥stico √© definitivo
            - Em casos potencialmente graves (como dor no peito, dificuldade respirat√≥ria, sangramentos intensos):
              * Recomende busca imediata de atendimento m√©dico
              * Forne√ßa n√∫meros de telefone de emerg√™ncia locais
              * Descreva sinais de alarme para observar
            - Para quest√µes n√£o m√©dicas, responda apenas: "Desculpe, s√≥ posso ajudar com quest√µes m√©dicas"
            - Caso o arquivo n√£o tenha relac√£o com medicina, avise o usu√°rio e n√£o processe o arquivo
            - Em quest√µes m√©dicas, inclua a frase: "Este √© apenas um parecer preliminar - o diagn√≥stico definitivo requer avalia√ß√£o m√©dica profissional." como um paragrafo final
            - Mantenha tom profissional, emp√°tico e sem alarmismo desnecess√°rio"""
        },
    ]
    
    if contexto:
        messages.append({"role": "user", "content": f"Contexto dos exames:\n{contexto}\n\nPergunta: {pergunta}"})
    else:
        messages.append({"role": "user", "content": pergunta})
    
    response = client.chat.completions.create(
        model="llama3-70b-8192",
        messages=messages
    )
    return response.choices[0].message.content

# Interface do Streamlit
def main():
    # Configura√ß√£o da p√°gina com √≠cone personalizado
    st.set_page_config(
        page_title="DiagnosticAI",
        page_icon="‚öïÔ∏è",
        layout="centered"
    )
    
    # Inicializar estado da sess√£o para controlar o aviso
    if "first_question_asked" not in st.session_state:
        st.session_state.first_question_asked = False
    
    # Sele√ß√£o de idioma
    lang = st.sidebar.selectbox(
        INTERFACE_TEXTS["English (United States)"]["select_language"],
        list(INTERFACE_TEXTS.keys()),
        index=0
    )
    
    # Imagem da logo (com largura responsiva)
    st.image(LOGO_PATH, use_column_width=True)

    st.markdown(f"**{INTERFACE_TEXTS[lang]['header']}**")

    # Mostrar aviso apenas se for a primeira vez
    if not st.session_state.first_question_asked:
        with st.container():
            st.warning(f"""
            **{INTERFACE_TEXTS[lang]['warning_title']}**  
            {INTERFACE_TEXTS[lang]['warning_message']}
            """)

    with st.sidebar:
        st.header(INTERFACE_TEXTS[lang]["sidebar_title"])
        uploaded_pdfs = st.file_uploader(
            INTERFACE_TEXTS[lang]["upload_label"], 
            type="pdf", 
            accept_multiple_files=True
        )
        
        mostrar_numeros_emergencia(lang)

    if uploaded_pdfs:
        texto_extraido = extract_text_from_pdfs(uploaded_pdfs, lang)
        st.session_state["texto_clinico"] = texto_extraido

    pergunta_usuario = st.text_input(INTERFACE_TEXTS[lang]["question_placeholder"])

    if pergunta_usuario:
        # Marcar que a primeira pergunta foi feita
        st.session_state.first_question_asked = True
        
        contexto = st.session_state.get("texto_clinico", None)
        resposta = diagnosticar_com_groq(pergunta_usuario, contexto, lang)
        
        st.markdown(f"### {INTERFACE_TEXTS[lang]['response_title']}")
        st.markdown(resposta)
        
        # Adicionar se√ß√£o de refer√™ncias formatada
        with st.expander(INTERFACE_TEXTS[lang]["references_title"]):
            st.markdown(f"""
            <div style="
                background-color: #f8f9fa;
                border-radius: 5px;
                padding: 15px;
                border-left: 4px solid #4e73df;
                margin-top: 20px;
            ">
                <p style="margin-bottom: 0;">{INTERFACE_TEXTS[lang]['references_text']}</p>
            </div>
            """, unsafe_allow_html=True)

if __name__ == "__main__":
    main()