import streamlit as st
import fitz  # PyMuPDF
from groq import Groq
import os
import json
from datetime import datetime, time
import pandas as pd
import folium
from streamlit_folium import folium_static

# Caminho din√¢mico da logo
CURRENT_DIR = os.path.dirname(os.path.abspath(__file__))
LOGO_PATH = os.path.join(CURRENT_DIR, "logo.png")

# Configurar chave da Groq
GROQ_API_KEY = "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"
client = Groq(api_key=GROQ_API_KEY)

# Carregar dados de hospitais (simulados - em produ√ß√£o seria uma API ou banco de dados)
def carregar_hospitais():
    return [
        {"nome": "Hospital Geral", "lat": -23.5505, "lon": -46.6333, "tipo": "Geral", "telefone": "(11) 1234-5678"},
        {"nome": "Pronto Socorro Central", "lat": -23.5515, "lon": -46.6343, "tipo": "Emerg√™ncia", "telefone": "(11) 9876-5432"},
        {"nome": "Hospital Infantil", "lat": -23.5525, "lon": -46.6353, "tipo": "Infantil", "telefone": "(11) 4567-8901"},
    ]

# Gloss√°rio m√©dico
GLOSSARIO = {
    "hipertens√£o": "Press√£o arterial elevada, geralmente acima de 140/90 mmHg.",
    "diabetes": "Doen√ßa metab√≥lica caracterizada por altos n√≠veis de glicose no sangue.",
    "ECG": "Eletrocardiograma - exame que registra a atividade el√©trica do cora√ß√£o.",
    "hemoglobina": "Prote√≠na nas c√©lulas vermelhas do sangue que transporta oxig√™nio.",
    "PCR": "Prote√≠na C-reativa - marcador de inflama√ß√£o no organismo.",
    "TGO/TGP": "Enzimas hep√°ticas que ajudam a avaliar a sa√∫de do f√≠gado.",
    "HDL/LDL": "Tipos de colesterol - HDL √© 'bom' colesterol, LDL √© 'ruim'.",
}

# Fun√ß√£o para extrair texto de PDFs
def extract_text_from_pdfs(uploaded_pdfs):
    text = ""
    for pdf in uploaded_pdfs:
        try:
            with fitz.open(stream=pdf.read(), filetype="pdf") as doc:
                for page in doc:
                    text += page.get_text("text")
            st.success(f"‚úÖ PDF '{pdf.name}' processado com sucesso!")
        except Exception as e:
            st.error(f"‚ùå Erro ao ler o PDF '{pdf.name}': {e}")
    return text

# Fun√ß√£o para classificar urg√™ncia
def classificar_urgencia(resposta):
    termos_vermelho = ["emerg√™ncia", "imediatamente", "urgente", "grave", "pronto-socorro", "risco de vida"]
    termos_amarelo = ["avaliar", "breve", "logo", "dentro de dias", "aten√ß√£o", "cuidado"]
    
    if any(termo in resposta.lower() for termo in termos_vermelho):
        return "üî¥ Vermelho (Emerg√™ncia - buscar atendimento imediato)"
    elif any(termo in resposta.lower() for termo in termos_amarelo):
        return "üü° Amarelo (Urgente - buscar atendimento em breve)"
    else:
        return "üü¢ Verde (Rotina - agendar consulta)"

# Fun√ß√£o para adicionar tooltips com gloss√°rio
def adicionar_glossario(texto):
    for termo, explicacao in GLOSSARIO.items():
        if termo.lower() in texto.lower():
            texto = texto.replace(termo, f'<span title="{explicacao}">{termo}</span>')
            texto = texto.replace(termo.capitalize(), f'<span title="{explicacao}">{termo.capitalize()}</span>')
    return texto

# Fun√ß√£o para interagir com a IA da Groq para diagn√≥sticos
def diagnosticar_com_groq(pergunta, contexto=None):
    messages = [
        {
            "role": "system", 
            "content": """Voc√™ √© uma intelig√™ncia artificial m√©dica especializada em an√°lise preliminar de condi√ß√µes de sa√∫de. 
            Suas responsabilidades incluem:
            
            1. Analisar sintomas descritos pelo usu√°rio com precis√£o e cuidado
            2. Interpretar relat√≥rios cl√≠nicos e resultados de exames quando fornecidos
            3. Oferecer informa√ß√µes m√©dicas baseadas em evid√™ncias cient√≠ficas
            4. Sugerir poss√≠veis condi√ß√µes relacionadas (como diagn√≥stico diferencial)
            5. Recomendar quando procurar atendimento m√©dico
            6. Fornecer contatos de emerg√™ncia quando necess√°rio
            
            Restri√ß√µes obrigat√≥rias:
            - NUNCA afirme que seu diagn√≥stico √© definitivo
            - Em casos potencialmente graves (como dor no peito, dificuldade respirat√≥ria, sangramentos intensos):
              * Recomende busca imediata de atendimento m√©dico
              * Forne√ßa n√∫meros de telefone de emerg√™ncia locais
              * Descreva sinais de alarme para observar
            - Para quest√µes n√£o m√©dicas, responda apenas: "Desculpe, s√≥ posso ajudar com quest√µes m√©dicas"
            - Caso o arquivo n√£o tenha relac√£o com medicina, avise o usu√°rio e n√£o processe o arquivo
            - Em quest√µes m√©dicas, inclua a frase: "Este √© apenas um parecer preliminar - o diagn√≥stico definitivo requer avalia√ß√£o m√©dica profissional." como um paragrafo final
            - Mantenha tom profissional, emp√°tico e sem alarmismo desnecess√°rio"""
        },
    ]
    
    if contexto:
        messages.append({"role": "user", "content": f"Contexto dos exames:\n{contexto}\n\nPergunta: {pergunta}"})
    else:
        messages.append({"role": "user", "content": pergunta})
    
    response = client.chat.completions.create(
        model="llama3-70b-8192",
        messages=messages
    )
    return response.choices[0].message.content

# Interface do Streamlit
def main():
    # Configura√ß√£o da p√°gina com √≠cone personalizado
    st.set_page_config(
        page_title="DiagnosticAI",
        page_icon="‚öïÔ∏è",
        layout="wide"
    )
    
    # CSS personalizado
    st.markdown("""
    <style>
        .urg-red {
            background-color: #ffcccc;
            padding: 10px;
            border-radius: 5px;
            border-left: 5px solid #ff0000;
        }
        .urg-yellow {
            background-color: #ffffcc;
            padding: 10px;
            border-radius: 5px;
            border-left: 5px solid #ffcc00;
        }
        .urg-green {
            background-color: #ccffcc;
            padding: 10px;
            border-radius: 5px;
            border-left: 5px solid #00cc00;
        }
        .tooltip {
            border-bottom: 1px dotted #000;
            cursor: help;
        }
    </style>
    """, unsafe_allow_html=True)
    
    # Imagem da logo (com largura responsiva)
    st.image(LOGO_PATH, use_column_width=True)

    st.markdown("""
    <div style="text-align: center;">
        <h1>DiagnosticAI</h1>
        <p>Fa√ßa perguntas m√©dicas para obter informa√ß√µes. Voc√™ pode carregar relat√≥rios m√©dicos ou exames em PDF para um diagn√≥stico mais preciso.</p>
    </div>
    """, unsafe_allow_html=True)

    # Sidebar com m√∫ltiplas funcionalidades
    with st.sidebar:
        st.header("‚öôÔ∏è Menu")
        
        tab1, tab2, tab3 = st.tabs(["üìÑ Documentos", "üíä Medicamentos", "üè• Hospitais"])
        
        with tab1:
            uploaded_pdfs = st.file_uploader("Adicione seus PDFs cl√≠nicos", type="pdf", accept_multiple_files=True)
            
        with tab2:
            st.subheader("Lembretes de Medicamentos")
            
            if 'medicamentos' not in st.session_state:
                st.session_state.medicamentos = []
            
            with st.form("med_form"):
                nome_med = st.text_input("Nome do Medicamento")
                dosagem = st.text_input("Dosagem")
                horarios = st.multiselect("Hor√°rios", ["Manh√£", "Tarde", "Noite"])
                frequencia = st.selectbox("Frequ√™ncia", ["Di√°rio", "Semanal", "Mensal"])
                submit_med = st.form_submit_button("Adicionar")
                
                if submit_med and nome_med:
                    novo_med = {
                        "nome": nome_med,
                        "dosagem": dosagem,
                        "horarios": horarios,
                        "frequencia": frequencia,
                        "adicionado_em": datetime.now().strftime("%d/%m/%Y %H:%M")
                    }
                    st.session_state.medicamentos.append(novo_med)
                    st.success("Medicamento adicionado!")
            
            if st.session_state.medicamentos:
                st.subheader("Seus Medicamentos")
                for i, med in enumerate(st.session_state.medicamentos):
                    with st.expander(f"{med['nome']} - {med['dosagem']}"):
                        st.write(f"**Hor√°rios:** {', '.join(med['horarios'])}")
                        st.write(f"**Frequ√™ncia:** {med['frequencia']}")
                        st.write(f"**Adicionado em:** {med['adicionado_em']}")
                        if st.button(f"Remover {i}"):
                            st.session_state.medicamentos.pop(i)
                            st.rerun()
        
        with tab3:
            st.subheader("Hospitais Pr√≥ximos")
            hospitais = carregar_hospitais()
            
            mapa = folium.Map(location=[-23.5505, -46.6333], zoom_start=13)
            
            for hospital in hospitais:
                folium.Marker(
                    [hospital["lat"], hospital["lon"]],
                    popup=f"<b>{hospital['nome']}</b><br>Tipo: {hospital['tipo']}<br>Tel: {hospital['telefone']}",
                    tooltip=hospital["nome"],
                    icon=folium.Icon(color="red" if hospital["tipo"] == "Emerg√™ncia" else "blue")
                ).add_to(mapa)
            
            folium_static(mapa, width=300)
            
            st.write("**Lista de Hospitais:**")
            for hospital in hospitais:
                st.write(f"- {hospital['nome']} ({hospital['tipo']}) - Tel: {hospital['telefone']}")

    # √Årea principal
    col1, col2 = st.columns([3, 1])
    
    with col1:
        if uploaded_pdfs:
            texto_extraido = extract_text_from_pdfs(uploaded_pdfs)
            st.session_state["texto_clinico"] = texto_extraido

        pergunta_usuario = st.text_area("ü©∫ Descreva seus sintomas ou fa√ßa sua pergunta m√©dica:", height=150)

        if st.button("Obter Diagn√≥stico Preliminar"):
            if pergunta_usuario:
                contexto = st.session_state.get("texto_clinico", None)
                resposta = diagnosticar_com_groq(pergunta_usuario, contexto)
                
                # Classificar urg√™ncia
                urgencia = classificar_urgencia(resposta)
                
                # Adicionar gloss√°rio
                resposta_com_glossario = adicionar_glossario(resposta)
                
                # Exibir resultados
                st.markdown("### üßæ Resposta da IA")
                
                # Container de urg√™ncia
                if "üî¥ Vermelho" in urgencia:
                    st.markdown(f'<div class="urg-red"><h4>{urgencia}</h4></div>', unsafe_allow_html=True)
                elif "üü° Amarelo" in urgencia:
                    st.markdown(f'<div class="urg-yellow"><h4>{urgencia}</h4></div>', unsafe_allow_html=True)
                else:
                    st.markdown(f'<div class="urg-green"><h4>{urgencia}</h4></div>', unsafe_allow_html=True)
                
                # Resposta com tooltips
                st.markdown(resposta_com_glossario, unsafe_allow_html=True)
                
                # Bot√µes de a√ß√£o
                st.markdown("### üìå A√ß√µes Recomendadas")
                col_btn1, col_btn2, col_btn3 = st.columns(3)
                
                with col_btn1:
                    if st.button("üìû Chamar Emerg√™ncia (192)"):
                        st.warning("Ligue para 192 (SAMU) ou 193 (Bombeiros) em caso de emerg√™ncia!")
                
                with col_btn2:
                    if st.button("üè• Mostrar Hospitais Pr√≥ximos"):
                        hospitais = carregar_hospitais()
                        mapa = folium.Map(location=[-23.5505, -46.6333], zoom_start=13)
                        
                        for hospital in hospitais:
                            folium.Marker(
                                [hospital["lat"], hospital["lon"]],
                                popup=f"<b>{hospital['nome']}</b><br>Tipo: {hospital['tipo']}<br>Tel: {hospital['telefone']}",
                                tooltip=hospital["nome"],
                                icon=folium.Icon(color="red" if hospital["tipo"] == "Emerg√™ncia" else "blue")
                            ).add_to(mapa)
                        
                        folium_static(mapa, width=700)
                
                with col_btn3:
                    if st.button("üíä Adicionar Lembrete de Medicamento"):
                        st.session_state.show_med_form = True
                
                if st.session_state.get("show_med_form", False):
                    with st.form("quick_med_form"):
                        nome_med = st.text_input("Nome do Medicamento")
                        dosagem = st.text_input("Dosagem")
                        submit_med = st.form_submit_button("Salvar")
                        
                        if submit_med and nome_med:
                            novo_med = {
                                "nome": nome_med,
                                "dosagem": dosagem,
                                "horarios": ["Manh√£", "Tarde", "Noite"],
                                "frequencia": "Di√°rio",
                                "adicionado_em": datetime.now().strftime("%d/%m/%Y %H:%M")
                            }
                            if 'medicamentos' not in st.session_state:
                                st.session_state.medicamentos = []
                            st.session_state.medicamentos.append(novo_med)
                            st.success("Medicamento adicionado aos lembretes!")
                            st.session_state.show_med_form = False
                            st.rerun()
            else:
                st.warning("Por favor, descreva seus sintomas ou fa√ßa uma pergunta.")

    with col2:
        st.markdown("### üìå Painel R√°pido")
        
        st.markdown("#### üö® Contatos de Emerg√™ncia")
        st.write("- SAMU: 192")
        st.write("- Bombeiros: 193")
        st.write("- Pol√≠cia: 190")
        st.write("- Centro de Toxicologia: 0800-722-6001")
        
        st.markdown("#### üìÖ Pr√≥ximos Lembretes")
        if 'medicamentos' in st.session_state and st.session_state.medicamentos:
            agora = datetime.now().time()
            proximos = []
            
            for med in st.session_state.medicamentos:
                if "Manh√£" in med["horarios"] and time(6,0) <= agora < time(12,0):
                    proximos.append(f"{med['nome']} - Manh√£")
                if "Tarde" in med["horarios"] and time(12,0) <= agora < time(18,0):
                    proximos.append(f"{med['nome']} - Tarde")
                if "Noite" in med["horarios"] and (time(18,0) <= agora or agora < time(6,0)):
                    proximos.append(f"{med['nome']} - Noite")
            
            if proximos:
                for item in proximos:
                    st.write(f"- {item}")
            else:
                st.write("Nenhum lembrete para este per√≠odo.")
        else:
            st.write("Nenhum medicamento cadastrado.")
        
        st.markdown("#### üìö Gloss√°rio M√©dico")
        termo_selecionado = st.selectbox("Buscar termo m√©dico", list(GLOSSARIO.keys()))
        st.write(GLOSSARIO[termo_selecionado])

if __name__ == "__main__":
    main()